Fixes Implemented - Packet Sniffer Security Hardening

1. Input Validation
- Added length checks before all struct.unpack() operations
- Validated minimum header sizes for all protocols (Ethernet, IP, TCP, UDP, ICMP)
- Added checks for invalid header fields (e.g., IP IHL field)

2. Memory Safety
- Prevented buffer overflows by validating packet lengths
- Added bounds checking for all packet parsing operations
- Limited maximum payload display to 100 bytes

3. Privilege Management
- Implemented privilege dropping after socket creation
- Switched to nobody/nogroup (UID/GID 65534) after acquiring raw socket
- Removed persistent root privileges during operation

4. Error Handling
- Added proper error handling for malformed packets
- Implemented graceful continuation after parsing errors
- Added try-except blocks for socket operations

5. Resource Management
- Added packet processing limit (10,000 packets by default)
- Ensured proper socket cleanup on exit
- Added early termination on keyboard interrupt

6. Information Disclosure
- Limited payload display to printable ASCII characters
- Added null checks before payload processing
- Removed raw binary data display

7. Protocol-Specific Fixes:
- Ethernet: Minimum 14-byte validation
- IPv4: IHL field validation and minimum 20-byte check
- TCP: Offset field validation
- UDP: Length field validation
- ICMP: Minimum 4-byte header check

Security Considerations:
- The script now safely handles malicious packet inputs
- Reduced attack surface through privilege dropping
- Added processing limits prevent resource exhaustion
- Memory-safe operations prevent buffer overflows

Note: While significantly hardened, this remains a diagnostic tool
and should not be run on untrusted networks without additional
safeguards. Monitor system resources during extended use.
